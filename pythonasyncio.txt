import asyncio
from multiprocessing import Pool
from datetime import datetime

async def factorial(name, i):
    print("start:(%s)...(%s)" % (name,i), datetime.now())
    await asyncio.sleep(1)
    print("end:(%s)...(%s)" % (name,i), datetime.now())

def process(i):
    loop = asyncio.get_event_loop()
    loop.run_until_complete(asyncio.gather(
        factorial("A", i),
        factorial("B", i),
        factorial("C", i),
    ))
    loop.close()

p = Pool(5)
for i in range(5):
    p.apply_async(process, args=(i,))
p.close()
p.join()


class MyEventLoopPolicy(asyncio.DefaultEventLoopPolicy):

    def get_event_loop(self):
        """Get the event loop.

        This may be None or an instance of EventLoop.
        """
        loop = super().get_event_loop()
        # Do something with loop ...
        return loop

asyncio.set_event_loop_policy(MyEventLoopPolicy())